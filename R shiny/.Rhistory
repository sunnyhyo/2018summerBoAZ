###############################################
###############################################
library(dplyr)
library(MASS)
starwars
glimpse(starwars)
starwars %>%
filter(species == "Droid")
starwars %>%
select(name, ends_with("color"))
#충돌해결
select <- dplyr::select
starwars %>%
select(name, ends_with("color"))
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%
select(name:mass, bmi)
starwars %>%
arrange(desc(mass))
starwars %>%
group_by(species) %>%
summarise(
n = n(),
mass = mean(mass, na.rm = TRUE)
) %>%
filter(n > 1)
###############################################
#데이터 프레임
#subset Cars93
Cars93_1<- Cars93[,1:8]
str(Cars93_1)
#number of cars by Type
table(Cars93_1$Type)
#filter(dataframe, filter condition1, filter condition2, ....) : &(AND)조건으로 row 데이터 부분집합 선별
#차종(type)이 "compact"이고 & 최대가격(max.price)이 20백$ 이하이고 & 고속도로 연비(MPG.highway) 가 30 이상인 관측치를 선별
Cars93_1 %>% filter( Type == c("Compact"), Max.Price <= 20, MPG.highway >= 30)
#고속도로 연비(MPG.highway) 가 높은 순서대로 정렬을 하시오.  만약 고속도로 연비가 동일하다면 최고가격(Max.Price)가 낮은 순서대로 정렬하시오.
Cars93_1 %>% arrange(desc(MPG.highway), Max.Price)
#고속도로 연비(MPG.highway) 가 높은 순서대로 정렬을 하시오.  만약 고속도로 연비가 동일하다면 최고가격(Max.Price)가 낮은 순서대로 정렬하시오.
Cars93_1 %>% arrange(desc(MPG.highway), Max.Price) %>% head(20)
#select(dataframe, VAR1, VAR2, ...) : 선별하고자 하는 변수 이름을 기입
#Cars93_1 데이터 프레임으로부터 제조사명(Manufacturer), 최대가격(Max.Price), 고속도로연비(MPG.highway) 3개 변수(칼럼)를 선별하시오.
Cars93_1 %>% select(Manufacturer, Max.Price, MPG.highway)
#select(dataframe, VAR1, VAR2, ...) : 선별하고자 하는 변수 이름을 기입
#Cars93_1 데이터 프레임으로부터 제조사명(Manufacturer), 최대가격(Max.Price), 고속도로연비(MPG.highway) 3개 변수(칼럼)를 선별하시오.
Cars93_1 %>% select(Manufacturer, Max.Price, MPG.highway)%>% head(20)
#select(dataframe, a:n) : a 번째부터 n 번째 변수 선별
Cars93_1 %>% select(Manufacturer:Price) %>% head(20)
Cars93_1 %>% select( one_of(vars)) %>% head(20)
#select(dataframe, one_of(Vars)) : 변수 이름 그룹에 포함된 모든 변수 선별
#"Manufacturer", "MAX.Price", "MPG.highway" 의 3개 변수이름을 포함하는 변수 그룹이 있다고 할 때, Cars93 데이터 프레임에서 이 변수 그룹에 있는 변수가 있다면(<- 즉, 있을 수도 있지만 없을 수도 있다는 뜻임!) 모두 선별
vars <- c("Manufacturer", "MAX.Price", "MPG.highway")
Cars93_1 %>% select( one_of(vars)) %>% head(20)
#Cars93 데이터 프레임에서 '차종(Type)'과 '생산국-미국여부(Origin)' 변수를 기준으로 중복없는 유일한 값을 추출
Cars93 %>% distinct( Origin )
Cars93 %>% distinct( Type )
Cars93 %>% distinct( Origin, Type )
unique(Cars93[, c("Origin", "Type")])   # rows names가 dataframe의 row 번호로 반환되는 차이
#sample_n(dataframe, a fixed number) : 특정 개수만큼 무작위 추출
#Cars93 데이터 프레임 (1~5 변수만 사용) 에서 10개의 관관측치를 무작위로 추출
Cars93 %>% select(1:5) %>%  sample_n(10)
Cars93 %>% select(1:5) %>%  sample_n(10)
#sample_frac(dataframe, a fixed fraction) : 특정 비율만큼 무작위 추출
#Cars93 데이터 프레임 (1~5 변수만 사용) 에서 10%의 관측치를 무작위로 추출
nrow(Cars93)
nrow(Cars93)*0.1
Cars93 %>% select(1:5) %>%  sample_frac(0.1) #9개 추출
#smaple_n(dataframe, n, replace = TRUE) : 복원 추출
#위 두 함수는 비복원추출이었음(defalt 옵션), 복원추출을 하고 싶다면 replace=TRUE
#Cars93 데이터 프레임(1~5번까지 변수만 사용)에서 20개의 관측치를 무작위 복원추출
Cars93 %>% select(1:5) %>%  sample_n(20, replace=TRUE)
#Cars93 데이터 프레임에서 '제조국가_미국여부(Origin)'의 'USA', 'non-USA' 요인 속성별로 각 10개씩의 표본
Cars93 %>% select(Manufacturer, Model, Origin) %>%
group_by(Origin) %>% sample_n(10)
#mutate(dataframe, 새로운변수= 기존변수 조합한 수식, ...): 기존변수+신규변수 모두 keep
Cars93_1 <- Cars93 %>% select( Model, Min.Price, Max.Price) %>% head(10) # subset for better printing
Cars93_1
Cars93_1 <- Cars93_1 %>% mutate(Price_range = Max.Price - Min.Price,
Price_Min_Max_ratio = Max.Price / Min.Price)
Cars93_1
#transmute(dataframe, 새로운 변수 = 기존 변수 조합한 수식, ...): 신규 변수만 keep
Cars93_1 <- Cars93 %>% select( Model, Min.Price, Max.Price) %>% head(10) # subset for better printing
Cars93_1
Cars93_2 <- Cars93_1 %>%  transmute( Price_range = Max.Price - Min.Price,
Price_Min_Max_ratio = Max.Price / Min.Price)
Cars93_2
#summarise(dataframe, mean, sd, ...) : 수치형 값에 대한 요약 통계량 계산
'''
- mean(x, na.rm = TRUE) : 평균, 결측값을 제외하고 계산하려면 na.rm = TRUE 추가
- median(x, na.rm = TRUE) : 중앙값
- sd(x, na.rm = TRUE) : 표준편차
- min(x, na.rm = TRUE) : 최소값
- max(x, na.rm = TRUE) : 최대값
- IQR(x, na.rm = TRUE) : 사분위수 (Inter Quartile Range = Q3 - Q1)
- sum(x, na.rm = TRUE) : 합, 결측값을 제외하고 계산하려면 na.rm = TRUE 추가
'''
Cars93 %>% summarise(Price_mean = mean(Price, na.rm = TRUE), # mean of Price
Price_median = median(Price, na.rm = TRUE), # median of Price
Price_sd = sd(Price, na.rm = TRUE), # standard deviation of Price
Price_min = min(Price, na.rm = T), # min of Price
Price_max = max(Price, na.rm = T), # max of Price
Price_IQR = IQR(Price), na.rm = T, # IQR of Price
Price_sum = sum(Price, na.rm = TRUE)) # sum of Price
Cars93 %>% summarise(Price_mean = mean(Price, na.rm = TRUE), # mean of Price
Price_median = median(Price, na.rm = TRUE), # median of Price
Price_sd = sd(Price, na.rm = TRUE), # standard deviation of Price
Price_min = min(Price, na.rm = T), # min of Price
Price_max = max(Price, na.rm = T), # max of Price
Price_IQR = IQR(Price), na.rm = T, # IQR of Price
Price_sum = sum(Price, na.rm = TRUE)) # sum of Price
#Cars93_1 데이터 프레임에서 (a) 총 관측치의 개수, (b) 제조사(Manufacturer)의 개수(유일한 값), (c) 첫번째 관측치의 제조사 이름, (d) 마지막 관측치의 제조사 이름, (e) 5번째 관측치의 제조사 이름
Cars93_1 <- Cars93[c(1:10), c("Manufacturer", "Model", "Type")] # subset for better print
Cars93_1
Cars93_1 %>% summarise( tot_cnt = n(), # counting the number of all observations
Manufacturer_dist_cnt = n_distinct(Manufacturer), # distinct number of var
First_obs = first(Manufacturer), # first observation
Last_obs = last(Manufacturer), # last observation
Nth_5th_obs = nth(Manufacturer, 5)) # n'th observation
group_df <- Cars93 %>% group_by(Type)
group_df %>% summarise(tot_conut = n(), # counting the number of cars
Manufacturer_dist_cnt = n_distinct(Manufacturer), # distinct number of var
Price_mean = mean(Price, na.rm = TRUE), # mean of Price
Price_sd = sd(Price, na.rm = TRUE) # standard deviation of Price
)
#summarise_each() : 다수의 변수에 동일한 summarise 함수 적용
#Cars93 데이터 프레임의 (i) 가격(Price) 변수와 (ii) 고속도로연비(MPG.highway) 의 두개의 변수에 대해
#(a) 평균(mean), (b) 중앙값(median), (c) 표준편차(standard deviation) 의 3개의 함수를 동시에 적용
Cars93 %>% summarise_each( funs(mean, median, sd), Price, MPG.highway)
###############################################
#그룹별로 행의 개수 세기
#dataframe %>% group_by( factor ) %>% summarise(n=n())
#차 종류(Type) 별로 그룹개수 세기
Cars93 %>% group_by(Type) %>% summarise(n=n())
Cars93 %>% group_by(Type) %>% summarise(n=n(), n_distinct_maker= n_distinct(Manufacturer))
#dataframe %>%  group_by( factor ) %>% tally()
Cars93 %>% group_by(Type) %>% tally()
#dataframe %>%count( factor )
Cars93 %>% count(Type)
###############################################
###############################################
#join 함수
####data frame을 조건에 맞게 join 시켜줌 ,sql 하고 비슷
####left , right , inner, full join 이 있음
set.seed(1)
log <- data.frame( user_id = sample(c(1,2,3), 10, TRUE), item_id =
sample( c(1,2,3), 10, TRUE ), correct = sample(c(0,1), 10, TRUE) )
users <- data.frame( user_id = c(1,2,4), age = c(20,20,30) )
items <- data.frame( item_id = 1:3, item = c("1+1","2*2","3/3") )
log ; users; items
log %>% left_join(users,"user_id")
log %>% left_join(users,"user_id") %>% left_join(items,"item_id")
log %>% right_join(users,"user_id")
log %>% inner_join(users,"user_id")
log %>% inner_join(users,"user_id") %>% inner_join(items,"item_id")
starwars
glimpse(starwars)
###############################################
###############################################
library(dplyr)
library(MASS)
starwars
glimpse(starwars)
starwars %>%
filter(species == "Droid")
starwars %>%
select(name, ends_with("color"))
starwars %>%
select(name, ends_with("color"))
starwars %>%
select(name, ends_with("color"))
###############################################
#데이터 프레임
#subset Cars93
Cars93_1<- Cars93[,1:8]
str(Cars93_1)
#number of cars by Type
table(Cars93_1$Type)
#filter(dataframe, filter condition1, filter condition2, ....) : &(AND)조건으로 row 데이터 부분집합 선별
#차종(type)이 "compact"이고 & 최대가격(max.price)이 20백$ 이하이고 & 고속도로 연비(MPG.highway) 가 30 이상인 관측치를 선별
Cars93_1 %>% filter( Type == c("Compact"), Max.Price <= 20, MPG.highway >= 30)
#silce(dataframe, from, to) : 위치를 지정해서 row 데이터 부분집합 선별하기
Cars93_1 %>% slice(6:10)
#고속도로 연비(MPG.highway) 가 높은 순서대로 정렬을 하시오.  만약 고속도로 연비가 동일하다면 최고가격(Max.Price)가 낮은 순서대로 정렬하시오.
Cars93_1 %>% arrange(desc(MPG.highway), Max.Price) %>% head(20)
#select(dataframe, VAR1, VAR2, ...) : 선별하고자 하는 변수 이름을 기입
#Cars93_1 데이터 프레임으로부터 제조사명(Manufacturer), 최대가격(Max.Price), 고속도로연비(MPG.highway) 3개 변수(칼럼)를 선별하시오.
Cars93_1 %>% select(Manufacturer, Max.Price, MPG.highway)%>% head(20)
#select(datarame, starts_with("xx_name")) : "xx_name"으로 시작하는 모든 변수 선별
#Cars93_1 데이터 프레임에서 "MPG"로 끝나는 모든 변수를 선별
Cars93_1 %>% select(starts_with("MPG"))%>% head(20)
#select(datarame, ends_with("xx_name")) : "xx_name"으로 끝나는 모든 변수 선별
#Cars93_1 데이터 프레임에서 "Price"로 끝나는 모든 변수를 선별
Cars93_1 %>% select(ends_with("Price"))%>% head(20)
#select(dataframe, contain("xx_name")) : "xx_name"을 포함하는 모든 변수 선별
#Cars93_1 데이터 프레임에서 "P"를 포함하는 모든 변수를 선별
Cars93_1 %>% select(contains("P"))%>% head(20)
Cars93_1 %>% select( one_of(vars)) %>% head(20)
names(Cars93_1)
Cars93_2 <- Cars93_1 %>% rename(New_Manufacturer = Manufacturer,
New_Model = Model,
New_Type = Type,
New_Min.Price = Min.Price,
New_Price = Price,
New_Max.Price = Max.Price,
New_MPG.city = MPG.city,
New_MPG.highway = MPG.highway)
names(Cars93_2)
names(Cars93)
#Cars93 데이터 프레임에서 '차종(Type)'과 '생산국-미국여부(Origin)' 변수를 기준으로 중복없는 유일한 값을 추출
Cars93 %>% distinct( Origin )
Cars93 %>% distinct( Type )
Cars93 %>% distinct( Origin, Type )
unique(Cars93[, c("Origin", "Type")])   # rows names가 dataframe의 row 번호로 반환되는 차이
#sample_n(dataframe, a fixed number) : 특정 개수만큼 무작위 추출
#Cars93 데이터 프레임 (1~5 변수만 사용) 에서 10개의 관관측치를 무작위로 추출
Cars93 %>% select(1:5) %>%  sample_n(10)
Cars93 %>% select(1:5) %>%  sample_n(10)
#sample_frac(dataframe, a fixed fraction) : 특정 비율만큼 무작위 추출
#Cars93 데이터 프레임 (1~5 변수만 사용) 에서 10%의 관측치를 무작위로 추출
nrow(Cars93)
nrow(Cars93)*0.1
Cars93 %>% select(1:5) %>%  sample_frac(0.1) #9개 추출
#smaple_n(dataframe, n, replace = TRUE) : 복원 추출
#위 두 함수는 비복원추출이었음(defalt 옵션), 복원추출을 하고 싶다면 replace=TRUE
#Cars93 데이터 프레임(1~5번까지 변수만 사용)에서 20개의 관측치를 무작위 복원추출
Cars93 %>% select(1:5) %>%  sample_n(20, replace=TRUE)
#Cars93 데이터 프레임에서 '제조국가_미국여부(Origin)'의 'USA', 'non-USA' 요인 속성별로 각 10개씩의 표본
Cars93 %>% select(Manufacturer, Model, Origin) %>%
group_by(Origin) %>% sample_n(10)
#mutate(dataframe, 새로운변수= 기존변수 조합한 수식, ...): 기존변수+신규변수 모두 keep
Cars93_1 <- Cars93 %>% select( Model, Min.Price, Max.Price) %>% head(10) # subset for better printing
Cars93_1
Cars93_1 <- Cars93_1 %>% mutate(Price_range = Max.Price - Min.Price,
Price_Min_Max_ratio = Max.Price / Min.Price)
Cars93_1
#transmute(dataframe, 새로운 변수 = 기존 변수 조합한 수식, ...): 신규 변수만 keep
Cars93_1 <- Cars93 %>% select( Model, Min.Price, Max.Price) %>% head(10) # subset for better printing
Cars93_1
Cars93_2 <- Cars93_1 %>%  transmute( Price_range = Max.Price - Min.Price,
Price_Min_Max_ratio = Max.Price / Min.Price)
Cars93_2
group_df <- Cars93 %>% group_by(Type)
group_df %>% summarise(tot_conut = n(), # counting the number of cars
Manufacturer_dist_cnt = n_distinct(Manufacturer), # distinct number of var
Price_mean = mean(Price, na.rm = TRUE), # mean of Price
Price_sd = sd(Price, na.rm = TRUE) # standard deviation of Price
)
###############################################
#그룹별로 행의 개수 세기
#dataframe %>% group_by( factor ) %>% summarise(n=n())
#차 종류(Type) 별로 그룹개수 세기
Cars93 %>% group_by(Type) %>% summarise(n=n())
Cars93 %>% group_by(Type) %>% summarise(n=n(), n_distinct_maker= n_distinct(Manufacturer))
#dataframe %>%  group_by( factor ) %>% tally()
Cars93 %>% group_by(Type) %>% tally()
#dataframe %>%count( factor )
Cars93 %>% count(Type)
log <- data.frame( user_id = sample(c(1,2,3), 10, TRUE), item_id =
sample( c(1,2,3), 10, TRUE ), correct = sample(c(0,1), 10, TRUE) )
users <- data.frame( user_id = c(1,2,4), age = c(20,20,30) )
items <- data.frame( item_id = 1:3, item = c("1+1","2*2","3/3") )
log
users
items
log %>% left_join(users,"user_id")
log %>% left_join(users,"user_id") %>% left_join(items,"item_id")
log %>% right_join(users,"user_id")
log %>% inner_join(users,"user_id")
log %>% inner_join(users,"user_id") %>% inner_join(items,"item_id")
log %>% full_join(users,"user_id")
